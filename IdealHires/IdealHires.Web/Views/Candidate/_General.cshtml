@model IdealHires.DTO.Candidate.CandidateBasicDTO
@{
    AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    options.OnSuccess = "OnGeneralSuccess";
}
<script type="text/javascript">
    function OnGeneralSuccess(data) {
        if (data === "BasicSuccess" || data === "BasicEditSuccessNext") {
            var parent_fieldset = $(this).parents('fieldset');
            var current_active_step = $(this).parents('.f1').find('.f1-step.active');
            var progress_line = $(this).parents('.f1').find('.f1-progress-line');
            if (data === "BasicSuccess") {                
                ToastMessageSuccess();
            } else {
                ToastMessageUpdate();
            }
            parent_fieldset.fadeOut(400, function () {
                current_active_step.removeClass('active').addClass('activated').next().addClass('active');
                bar_progress(progress_line, 'right');
                $(this).next().fadeIn();
                scroll_to_class($('.f1'), 20);
            });
        }
        else if (data === "BtnBasicSuccess") {
            ToastMessageSuccess();
        } else if (data === "BasicEditSuccess") {
            ToastMessageUpdate();
        }
        else if (data === "BasicFailure") {
            $('#pWarningMessage').empty().html('There was an error saving information !');
            $('#CommonWarningModel').modal('show');
        }
    }

</script>

@using (Ajax.BeginForm("General", "Candidate", null, options, new { enctype = "multipart/form-data", @id = "formBasic" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-validationdanger" })
    @Html.HiddenFor(m => m.Id)
    <div class="row">
        <div class="col-sm-12">
            <div class="md-form">
                @Html.TextBoxFor(m => m.JobTitle, new { @class = "form-control", autocomplete = "off" })
                <label class="">Desired Job Title <span>*</span></label>
            </div>
            @Html.ValidationMessageFor(m => m.JobTitle, "", new { @class = "text-validationdanger" })

        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="md-form">
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", autocomplete = "off" })
                <label>First Name</label>

            </div>
            <div>
                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-validationdanger" })
            </div>
        </div>
        <div class="col-sm-6">
            <div class="md-form">
                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", autocomplete = "off" })
                <label>Last Name</label>

            </div>
            <div>
                @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-validationdanger" })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="em-float-right">
                @Html.TextBoxFor(m => m.ResumeFile, new { @class = "upload-file", type = "file" })<em class="far fa-question-circle col-blue ques"></em>
            </div>
            <div class="ft-13 margin-top-minus">
                @if (!string.IsNullOrEmpty(Model.ResumeFilePath))
                {
                    <span>@Model.ResumeFilePath</span>
                }
                else
                {
                    <span>Resume not uploaded.</span>
                }
            </div>
        </div>        
    </div>

    <div class="f1-buttons">
        <button type="submit" name="submit" value="Save" class="btn btn-blue btn-sm waves-effect waves-light fnt-13 mr-3"><i class="fa fa-cloud-upload-alt fnt-1rem mr-2"></i> Save</button>
        <button type="submit" class="btn btn-nextt rounded-circle btn-circle-next"><em class="fa fa-arrow-right"></em></button>
    </div>
}





