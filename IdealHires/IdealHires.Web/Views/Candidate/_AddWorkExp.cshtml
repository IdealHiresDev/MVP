@model IdealHires.DTO.Candidate.CandidateWorkDTO
@{
    AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    options.OnSuccess = "WorkExperienceSuccess";
    options.InsertionMode = InsertionMode.ReplaceWith;
}
<script type="text/javascript">
    $(document).ready(function () {
        $("#exampleSwitch").change(function () {
            if ($("#exampleSwitch").is(":checked")) {
                $('#IsCurrent').val('True');
                $('#EndAt').val('');
                $('#EndAt').attr("data-val", "false");
                $('#EndAtDiv').hide();
            }
            else {
                $('#IsCurrent').val('False');
                $('#EndAt').attr("data-val", "true");
                $('#EndAtDiv').show();
            }
        });
    });
    function WorkExperienceSuccess(data) {
        debugger;
        if (data == "WorkExpSuccess") {
            $("#WorkExpModal").modal('hide');
            LoadWorkData('Saved');
            LoadWorkDataPreview('Updated');
        } else if (data == "WorkExpEditSuccess") {
            $("#WorkExpModal").modal('hide');
            LoadWorkData('Updated');
            LoadWorkDataPreview('Updated');
        } else if (data == "WorkExpEditPreviewSuccess") {
            $("#PreviewWorkExpModal").modal('hide');
            LoadWorkDataPreview('Updated');
        }
        else {
            $("#WorkExpModal").modal('hide');
            LoadWorkData('');
        }
    }

    $("#btnAddWorkSubmit").on("click", function (e) {
        var formId = e.delegateTarget.form.id;
        $.validator.unobtrusive.parse(formId);
        $("#" + formId).validate();
        var res = $("#" + formId).valid();
        if ($("#" + formId).valid()) {
            $("#" + formId).submit();
        }
        else {
            return false;
        }
    });
</script>
@using (Ajax.BeginForm("WorkExp", "Candidate", null, options, new { @id = "formWork" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-validationdanger" })
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ProfileId)
    @Html.HiddenFor(m => m.Option)
    <div class="modal-header">
        <h4 class="modal-title col-blue"><em class="fas fa-suitcase col-blue"></em> Add Work Experience</h4>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
    </div>
    <div class="modal-body">
        <div class="row">
            <div class="col-sm-6">
                <div class="md-form">
                    @Html.TextBoxFor(m => m.PositionName, new { @class = "form-control" })
                    <label>Position</label>
                    @Html.ValidationMessageFor(m => m.PositionName, "", new { @class = "text-validationdanger" })
                </div>
            </div>
            <div class="col-sm-6">
                <div class="md-form">
                    @Html.TextBoxFor(m => m.CompanyName, new { @class = "form-control" })
                    <label>Company</label>
                    @Html.ValidationMessageFor(m => m.CompanyName, "", new { @class = "text-validationdanger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6 col-xs-12">
                <div class="group profile-form">
                    @Html.TextBoxFor(m => m.StartAt, new { id = "datepicker", @class = "datepicker", placeholder = "From" })
                    @Html.ValidationMessageFor(m => m.StartAt, "", new { @class = "text-validationdanger" })
                </div>
            </div>
            @if (Model.IsCurrent)
            {
                <div class="col-sm-6" id="EndAtDiv" style="display: none;">
                    @Html.TextBoxFor(m => m.EndAt, new { @class = "datepicker", placeholder = "To" })
                    @Html.ValidationMessageFor(m => m.EndAt, "", new { @class = "text-validationdanger" })
                </div>
            }
            else
            {
                <div class="col-sm-6" id="EndAtDiv">
                    @Html.TextBoxFor(m => m.EndAt, new { @class = "datepicker", placeholder = "To" })
                    @Html.ValidationMessageFor(m => m.EndAt, "", new { @class = "text-validationdanger" })
                </div>
            }
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="md-form">
                    @Html.TextBoxFor(m => m.Salary, new { @class = "form-control" })
                    <label>Salary</label>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="switch-btn-1 sw-pre">
                    @Html.HiddenFor(m => m.IsCurrent)
                    @if (Model.IsCurrent)
                    {
                        <input class="switch-input" id="exampleSwitch" type="checkbox" checked="checked" name="exampleSwitch">
                        <label class="switch-paddle col-grey" for="exampleSwitch"></label>
                        <span class="ft-sm col-grey ft-sml">This is my current job</span>
                    }
                    else
                    {
                        <input class="switch-input" id="exampleSwitch" type="checkbox" name="exampleSwitch">
                        <label class="switch-paddle col-grey" for="exampleSwitch"></label>
                        <span class="ft-sm col-grey ft-sml">This is my current job</span>
                    }

                </div>
            </div>
        </div>
        <div class="row emp-pro mt-2">
            <div class="col-sm-12">
                <div class="md-form">
                    @Html.TextAreaFor(m => m.Description, 2, 60, new { @class = "form-control" })
                    <label>Description</label>
                    @*<textarea class="tab-cus-input" rows="2" placeholder="Description"></textarea>*@
                    <div class="em-float-right modalpopup1"> <span class="ft-sml col-grey">Resume Tips</span><em class="far fa-question-circle ml-2 col-blue"></em> </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-outline-grey waves-effect" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn blue-theme-button waves-effect waves-light addWork" id="btnAddWorkSubmit">Submit</button>
    </div>

}