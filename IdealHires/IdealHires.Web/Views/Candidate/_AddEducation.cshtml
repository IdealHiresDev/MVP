@model IdealHires.DTO.Candidate.CandidateEducationDTO
@{
    AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    options.OnSuccess = "EducationSuccess";
    options.InsertionMode = InsertionMode.ReplaceWith;
}
<script type="text/javascript">
    $(document).ready(function () {
        $("#exampleSwitch").change(function () {
            if ($("#exampleSwitch").is(":checked")) {
                $('#IsDegreeOrCertification').val('True');
            }
            else {
                $('#IsDegreeOrCertification').val('False');
            }
        });
    });
    function EducationSuccess(data) {
        debugger;
        if (data == "EducationSuccess") {
            $("#AcademicsModel").modal('hide');
            LoadEducationData();
        } else {
            $('#pWarningMessage').empty().html('There was an issue saving data !');
            $('#CommonWarningModel').modal('show');
        }
    }

    $("#btnAddEducationSubmit").on("click", function (e) {
        var formId = e.delegateTarget.form.id;
        $.validator.unobtrusive.parse(formId);
        $("#" + formId).validate();
        var res = $("#" + formId).valid();
        if ($("#" + formId).valid()) {
            $("#" + formId).submit();
        }
        else {
            return false;
        }
    });
    function LoadEducationData() {
    $.ajax({
        url: "../Candidate/EducationDetails",
        type: "GET",
        contentType: "application/json",
        async: true,
        // dataType: 'json',
        success: function (data) {
            $('#EducationDetailsDiv').empty().html(data);
            ToastMessageSuccess();
        },
        error: function (xHr, status, res) {
            $('#pWarningMessage').empty().html(res);
            $('#CommonWarningModel').modal('show');
        }
    });
}
</script>
@using (Ajax.BeginForm("Education", "Candidate", null, options, new { @id = "formEducation" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-validationdanger" })
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ProfileId)
    <div class="modal-header">
        <h4 class="modal-title col-blue"><em class="fas fa-suitcase col-blue"></em> Add Education</h4>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
    </div>
    <div class="modal-body">
        <div class="row">
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.Major, new { @class = "tab-cus-input", placeholder = "Major" })
                @Html.ValidationMessageFor(m => m.Major, "", new { @class = "text-validationdanger" })
                @*<input id="name" type="text" placeholder="Major" class="tab-cus-input">*@
            </div>
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.InstituteName, new { @class = "tab-cus-input", placeholder = "University or Institute" })
                @Html.ValidationMessageFor(m => m.InstituteName, "", new { @class = "text-validationdanger" })
                @*<input id="name" type="text" placeholder="University or Institute" class="tab-cus-input">*@
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.Minor, new { @class = "tab-cus-input", placeholder = "Minor" })
                @Html.ValidationMessageFor(m => m.Minor, "", new { @class = "text-validationdanger" })
                @*<input id="name" type="text" placeholder="Minor" class="tab-cus-input">*@
            </div>
            <div class="col-sm-6">
                <div class="switch-btn-1">
                    @Html.HiddenFor(m => m.IsDegreeOrCertification)
                    @if (Model.IsDegreeOrCertification)
                    {
                        <input class="switch-input" id="exampleSwitch" type="checkbox" checked="checked" name="exampleSwitch">
                        <label class="switch-paddle col-grey" for="exampleSwitch"></label>
                        <span class="ft-sm col-grey ft-sml">Degree or Certification Received?</span>
                    }
                    else
                    {
                        <input class="switch-input" id="exampleSwitch" type="checkbox" name="exampleSwitch">
                        <label class="switch-paddle col-grey" for="exampleSwitch"></label>
                        <span class="ft-sm col-grey ft-sml">Degree or Certification Received?</span>
                    }

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                @*<div class="group profile-form">*@
                @Html.TextBoxFor(m => m.StartAt, new { @class = "datepicker", placeholder = "From" })
                @Html.ValidationMessageFor(m => m.StartAt, "", new { @class = "text-validationdanger" })
                @*</div>*@
            </div>
            <div class="col-sm-6">
                @*<div class="group profile-form">*@
                @Html.TextBoxFor(m => m.EndAt, new { @class = "datepicker", placeholder = "To" })
                @Html.ValidationMessageFor(m => m.EndAt, "", new { @class = "text-validationdanger" })
                @*<input id="datepicker-3" placeholder="To" />*@
                @*</div>*@
            </div>
            @*<div class="row d-none">
                    <div class="col-sm-12 group profile-form">
                        <input class="log-user" type="text" required>
                        <label class="pl-3">Description</label>
                    </div>
                </div>*@
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-save" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-nextt btn-hover addWork" id="btnAddEducationSubmit">Submit</button>
    </div>
}


